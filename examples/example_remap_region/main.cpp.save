/*
 * main_remap_regions.cpp
 *
 *  Created on: Jul 18, 2019
 *      Author: srossi
 */


#include "libmesh/exodusII_io.h"
#include "libmesh/mesh.h"
#include "libmesh/mesh_generation.h"
#include <libmesh/point_locator_tree.h>
#include "libmesh/elem.h"
#include "libmesh/getpot.h"
#include <algorithm>
#include "Util/IO/io.hpp"


int main(int argc, char ** argv)
{
    // Initialize libmesh
    using namespace libMesh;
	// Import input file
	GetPot data = BeatIt::readInputFile(argc, argv);

    LibMeshInit init (argc, argv, MPI_COMM_WORLD);

    // Create mesh:
    // one for the conforming mesh
    // one with the regions to be mapped
    libMesh::Mesh mesh(init.comm());

    std::string vtk_mesh_file = data("input_mesh", "NONE");
    if( "NONE" != vtk_mesh_file)
    {
    	std::cout << "Reading mesh " << vtk_mesh_file << std::endl;
    	mesh.read(vtk_mesh_file);
    }
    else
    {
    	std::cout << "Set input_mesh in input file!" << std::endl;
    	throw std::runtime_error("No mesh given");
    }


    std::string subregion_meshes = data("subregions", "NONE");
    std::vector<std::string> mesh_files_vec;
  	BeatIt::readList(subregion_meshes,mesh_files_vec);

  	std::cout << subregion_meshes << std::endl;
  	int num_subregions = mesh_files_vec.size();
  	std::cout << "num subregions: " << num_subregions << std::endl;
  	for(auto && m : mesh_files_vec) std::cout << m << std::endl;
	double tolerance = data("tolerance", 1e-2);

	std::cout << "Reading meshes and creating point locator ...  " << std::endl;
	std::vector<std::unique_ptr<libMesh::Mesh> > region_meshes_ptr(num_subregions);
  	std::vector< std::unique_ptr< libMesh::PointLocatorTree > > locator_ptr(num_subregions);
  	for ( int i = 0; i < num_subregions; ++i)
  	{
  		std::cout << "Reading mesh " << mesh_files_vec[i] << ", " << i << std::endl;
  		region_meshes_ptr[i].reset(new libMesh::Mesh(init.comm()));
  		region_meshes_ptr[i]->read (mesh_files_vec[i]);
  		region_meshes_ptr[i]->print_info();
  		locator_ptr[i].reset( new libMesh::PointLocatorTree(*region_meshes_ptr[i]));
  		locator_ptr[i]->set_close_to_point_tol(tolerance);
  	}


	libMesh::MeshBase::const_element_iterator el = mesh.active_local_elements_begin();
	const libMesh::MeshBase::const_element_iterator end_el = mesh.active_local_elements_end();

	int missing_elements = 0;
	std::set<int > missing_elem;

	std::cout << "Looping over elements: " << std::endl;
	int c = 0;
	for( ; el != end_el; ++el)
	{
		c++;
		Elem * elem = *el;

		auto centroid = elem->centroid();
                elem->subdomain_id() = 666;
//		int blockID = heart_elem->subdomain_id();
                bool found = false;
		for ( int i = 0; i < num_subregions; ++i)
		{

			const Elem* subregion_element = (*locator_ptr[i])(centroid);
			if(subregion_element)
			{
				elem->subdomain_id() = i+1;
				std::cout << c << " on " << elem->subdomain_id() << std::endl;
                                found = true;
				break;
			}
//			if( i == num_subregions)
//			{
//				std::cout << c << " on " << 0 << std::endl;
//			}
		}

                if( 2 == elem->subdomain_id())
                {
/*                std::vector<int> nids(4);
                for (int n = 0; n < 4; ++n)
                { 
                    
                for ( int i = 0; i < num_subregions; ++i)
                {

                        const Elem* subregion_element = (*locator_ptr[i])(elem->point(n));
                        if(subregion_element)
                        {
                                nids[n] = i+1;
//                                std::cout << c << " on " << i << std::endl;
//                                found = true;
                                break;
                        }
//                      if( i == num_subregions)
//                      {
//                              std::cout << c << " on " << 0 << std::endl;
//                      }
                } 
                elem->subdomain_id() = *std::min_element(nids.begin(),nids.end());
                }
*/
                    
                }
		if(!found)
		{
			int elID = elem->id();
//			std::cout << blockID << ":" << elID << ", " << std::flush;
//			std::cout << "Centroid not found! " << std::endl;
//			centroid.print();
//			std::cout << std::endl;
			missing_elements++;
			missing_elem.insert(elID);
		}

	}


        int num_missed_els = 10;
        int loop = 0;
        while(num_missed_els >= 1)
        {
        loop++;
        el = mesh.active_local_elements_begin();
        //int c = 0;
         num_missed_els = 0;
        for( ; el != end_el; ++el)
        {
               Elem * elem = *el;
               auto subID = elem->subdomain_id();
               if( 666 == subID )
               {
                     std::vector<int> ids;
                     for (unsigned int side=0; side< elem->n_sides(); side++)
	             {
                         Elem * neighbor = elem->neighbor_ptr(side);
                         if(neighbor) ids.push_back(neighbor->subdomain_id());
                     }
//                     for (auto && v : ids) std::cout << v <<  std::endl;
                     int min = *std::min_element( ids.begin(), ids.end() );
                     
                     elem->subdomain_id() = min; //std::min_element(ids.begin(), ids.end());
                     if(666 == elem->subdomain_id() || 0 == elem->subdomain_id() ) num_missed_els++;
               }
       }
        std::cout << "Missed: " << c << " elements, still missing " << num_missed_els << std::endl;
        if(loop >= 10) break;
      }




     
        el = mesh.active_local_elements_begin();

        std::cout << "Looping over elements: " << std::endl;
        c = 0;
        for( ; el != end_el; ++el)
        {
             c++;
             Elem * elem = *el;
             if( 2 == elem->subdomain_id() )
             {
                 std::cout << "Looking if element: " << c <<  " is at the boundary " << std::endl;
                 std::vector<int> nids;
                 bool modify_id = false;
                 for(int s = 0; s <= elem->n_sides(); ++s) 
                 
                 //for (int n = 0; n < elem; ++n)
                 {
                     //for ( int i = 0; i < num_subregions; ++i)
                     //{
                         const Elem* subregion_element = (*locator_ptr[0])(elem->point(n));
                         if(subregion_element)
                         { 
                              elem->subdomain_id() = 1;
                              //nids.push_back(i+1);
                              break;
                         }
                         //else throw std::runtime_error("Not Found!");
//                     } 
//                     std::cout << "nids size: " << nids.
//                     auto sid  = *std::min_element(nids.begin(),nids.end());
//                     if(sid != 0) elem->subdomain_id() = sid;
//                     else 
//                    { 
//                          std::cout << "sid is zero" << std::endl;
//                          for( auto && id : nids) std::cout << id << " ";
//                          std::cout << std::endl;
//                          throw std::runtime_error("Wrong");
//                     }
                 }

             }
         }

//    libMesh::Mesh regions_mesh(init.comm());
//
//    // Read meshes
//    // first take name from the input file
//    std::string heart_meshfile = data("heart_mesh", "NONE");
//    std::cout << "Heart mesh file: " << heart_meshfile << std::endl;
//    std::string regions_meshfile = data("regions_mesh", "NONE");
//    std::cout << "Regions mesh file: " << regions_meshfile << std::endl;
//
//    // Read the input meshes.
//    std::cout << "Reading Heart Mesh" << std::endl;
//    heart_mesh.read (&heart_meshfile[0]);
//    std::cout << "Reading Regions Mesh" << std::endl;
//    regions_mesh.read (&regions_meshfile[0]);
//
//    // For each element in the heart mesh
//    // we look for the centroid
//    // and we try to locate it in the regions mesh
//
//	// REGIONS MAP
//	//  1 - MV (Mitral Valve)
//	//  2 - TV (Tricuspid Valve)
//	//  3, 4, 15 - PV (Pulmonic Valve)
//	//  5 - PA (Pulmonary Arteries)
//	//  6, 7, 8 - AV (Aortic Valve)
//	//  9 - A (Aorta)
//	// 10, 11, 12 - RPM (Right Papillary Muscles)
//	// 13, 14 - LPM (Left Papillary Muscles)
//	// 16 - LV (Left Ventricle)
//	// 17 - RV (Right Ventricle)
//	// 18, 19 - VC (Vena Cava)
//	// 20 - TVR (Tricuscpid Valve Ring)
//	// 21 - RAA (Right Atrial Appendage)
//	// 22 - SAN (Sino-Atrial Node)
//	// 23 - CT (Crista Terminalis)
//	// 24 - RAPW (Right Atrial Posterior Wall)
//	// 25 - RAAW (Right Atrial Anterior Wall)
//	// 26 - RAR (Right Atrial Roof)
//	// 27, 28, 31, 37 - PVs (Pulmonary Veins)
//	// 29 - MVR (Mitral Valve Ring)
//	// 30 - LAA (Left Atrial Appendage)
//	// 32 - LA (Left Atrium)
//	// 33, 35 - Left and Right Carina
//	// 34, 36 - Left and Right Antra
//    int laIDs[] = {27, 28, 29, 30, 31,32, 33, 34, 35, 36, 37};
//    int raIDs[] = {18, 19, 20, 21, 22, 23, 24, 25, 26};
//    int vIDs[]  = {16, 17};
//    // HEART MAP
//    // 1 - LA
//    // 2 - RA
//    // 3 - LV+RV
//    // 40 - A
//    // 41, 42, 43 - AV
//    // 50 - PA
//    // 51, 52, 53 - PV
//    // 60 - MV
//    // 61, 62 - LPM
//    // 70 - TV
//    // 71, 72, 73 - RPM
//
//    // We only need to split the atria and the ventricles!!!!
//    // Not touching the valves and the vessels.
//    // We are going to do three loop
//    // 1) Ventricles
//    // 2) LA
//    // 3) RA
//    // Whish me luck
//
//    // We need to create a point locator
//    std::cout << "Creating Point Locator" << std::endl;
//    libMesh::PointLocatorTree locator (regions_mesh);
//    //locator.enable_out_of_mesh_mode ();
//    double tolerance = data("tolerance", 1e-2);
//    locator.set_close_to_point_tol(tolerance);
//
//    libMesh::MeshBase::const_element_iterator el = heart_mesh.active_local_elements_begin();
//    const libMesh::MeshBase::const_element_iterator end_el = heart_mesh.active_local_elements_end();
//    std::cout << "Looping over heart mesh elements ... " << std::endl;
//    int missing_elements = 0;
//    std::set<int > missing_elem;
//
//    for( ; el != end_el; ++el)
//    {
//        Elem * heart_elem = *el;
//
//        auto centroid = heart_elem->centroid();
//
//        int blockID = heart_elem->subdomain_id();
//        std::unique_ptr< std::set<subdomain_id_type> > subdomains;
//
//        bool remap = true;
//        switch(blockID)
//        {
//        	case 1:
//        	{
//        		subdomains.reset(new  std::set<subdomain_id_type>(laIDs, laIDs+11));
//        		break;
//        	}
//        	case 2:
//        	{
//        		subdomains.reset(new std::set<subdomain_id_type>(raIDs, raIDs+9));
//        		break;
//        	}
//        	case 3:
//        	{
//        		subdomains.reset(new std::set<subdomain_id_type>(vIDs, vIDs+2));
//        		break;
//        	}
//        	default:
//        	{
//        		remap = false;
//        		break;
//        	}
//
//        }
//
//        if(remap)
//        {
//			const Elem* regions_element = locator(centroid,subdomains.get());
//			if(!regions_element)
//			{
//				int elID = heart_elem->id();
//				std::cout << blockID << ":" << elID << ", " << std::flush;
//				std::cout << "Centroid not found! " << std::endl;
//				centroid.print();
//				std::cout << std::endl;
//				missing_elements++;
//				missing_elem.insert(elID);
//			}
//			else
//			{
//				//std::cout << regions_element->subdomain_id() << ":" << regions_element->id() << ", " << std::flush;
//				heart_elem->subdomain_id() = regions_element->subdomain_id()+100;
//			}
//		}
//    }
//
    std::cout << "Missed " << missing_elements << " elements." << std::endl;

    std::cout << "Actually missed " << missing_elem.size() << " elements." << std::endl;

    std::cout << "Export to new mesh" << std::endl;
    std::string output_file = data("output", "remapped_mesh.e");
    ExodusII_IO exporter(mesh);
    exporter.write(output_file);

    std::cout << "Good luck!" << std::endl;
    return 0;
}





