# FILE:    "data.beat"
# PURPOSE: Example Atrial Monowave
# (C) 2016 Simone Rossi
#
# License Terms: GNU Lesser GPL, ABSOLUTELY NO WARRANTY
#####################################################################

[mesh]
    # number of elements per side
    input_mesh_name = square.e
    read_mesh = true
    elX = 40
    elY = 80
    # input_mesh_name = LA_T4_m1_fibers.e
    # input_mesh_name = LA_T4_m3_bis.e
    #input_mesh_name = RA_test.e
    
[../]

[poisson1]
    # Output Folder
    output_folder = LA_Output3
    rhs = 0.0
    centerline_x = -0.423091610306789
    centerline_y = 0.464689553934891
    centerline_z = 0.777854168692178

    epi_angle = 0.0
    endo_angle = 0.0
    # rhs = 'exp(-0.01*((x-94.3516)^2+(y-114.702)^2+(z-100.077)^2))'
    rhs = 0.0
    [./BC]
        #list = epi,endo
        #list = epi,endo,rv,septum
        list = 'zero, one'
        [./zero]
        flag = 900,1200,1300,600
        type = Dirichlet
        mode = Full
        component  = All
        function = 0.0
        [../]
        [./one]
        flag = 100,1900,400,200
        type = Dirichlet #NitscheSymmetric
        mode = Full
        component  = All
        function = 1.0
        [../]
    [../]
[../]
[poisson2]
    # Output Folder
    output_folder = LA_Output3
    rhs = 0.0
    centerline_x = -0.423091610306789
    centerline_y = 0.464689553934891
    centerline_z = 0.777854168692178

    epi_angle = 0.0
    endo_angle = 0.0
    # rhs = 'exp(-0.01*((x-94.3516)^2+(y-114.702)^2+(z-100.077)^2))'
    rhs = 0.0
    [./BC]
        #list = epi,endo
        #list = epi,endo,rv,septum
        list = 'zero, one'
        [./zero]
        flag = 101,201,311,321,401,601,701,801,901,1001,1101,1201,1301,1901
        type = Dirichlet
        mode = Full
        component  = All
        function = 0.0
        [../]
        [./one]
        flag =  102,202,312,322,402,602,702,802,902,1002,1102,1202,1302,1902
        type = Dirichlet #NitscheSymmetric
        mode = Full
        component  = All
        function = 1.0
        [../]
    [../]
[../]
[poisson3]
    # Output Folder
    output_folder = LA_Output_grandi3
    rhs = 0.0
    centerline_x = 0.543129839120427
    centerline_y = -0.567277704071269
    centerline_z = 0.619036335218417

    epi_angle = 0.0
    endo_angle = 0.0
    # rhs = 'exp(-0.01*((x-94.3516)^2+(y-114.702)^2+(z-100.077)^2))'
    rhs = 0.0
    [./BC]
        #list = epi,endo
        #list = epi,endo,rv,septum
        list = 'zero, one'
        [./zero]
        flag = 101,201,311,321,401,601,701,801,901,1001,1101,1201,1301,1901
        type = Dirichlet
        mode = Full
        component  = All
        function = 0.0
        [../]
        [./one]
        flag =  102,202,312,322,402,602,702,802,902,1002,1102,1202,1302,1902
        type = Dirichlet #NitscheSymmetric
        mode = Full
        component  = All
        function = 1.0
        [../]
    [../]
[../]


[poisson4]
    # Output Folder
    output_folder = LA_Output3
    rhs = 0.0
    centerline_x = 0.543129839120427
    centerline_y = -0.567277704071269
    centerline_z = 0.619036335218417

    epi_angle = 0.0
    endo_angle = 0.0
    # rhs = 'exp(-0.01*((x-94.3516)^2+(y-114.702)^2+(z-100.077)^2))'
    rhs = 0.0
    [./BC]
        #list = epi,endo
        #list = epi,endo,rv,septum
        list = 'zero, one'
        [./zero]
        flag = 200
        type = Dirichlet
        mode = Full
        component  = All
        function = 0.0
        [../]
        [./one]
        flag = 100
        type = Dirichlet #NitscheSymmetric
        mode = Full
        component  = All
        function = 1.0
        [../]
        [./two]
        flag = 900,1300
        type = Dirichlet #NitscheSymmetric
        mode = Full
        component  = All
        function = 2.0
        [../]
    [../]
[../]



[monodomain]
    build_fibers = false
    # Output Folder
    output_folder = square_test_rotated2

    # If we want to impose an initial conditions on the potential
    # we can use the parameter ic. For example
    # ic = 'x + y * t'

    # This can be made a function
    Dff = 0.13342 #1.3342
    Dss = 0.017606
    Dnn = 0.017606
    Chi = 1400.0
    anisotropy = transverse
    # Ionic Model
    # For now: NashPanfilov or ORd
    ionic_model = NashPanfilov

    # In reaction step: use mass or  lumped_mass
    reaction_mass = mass
    diffusion_mass = mass

    # fiber fields
    fibers  = 'sqrt(2)/2. * (y >= 0.5), 1.0 * (y < 0.5), sqrt(2)/2. * (y >= 0.5)'
    sheets  = '1.0 * (y < 0.5), sqrt(2)/2. * (y >= 0.5), sqrt(2)/2. * (y < 0.5)'
    xfibers = '0.0, 0.0, 1.0'
#    fibers = '1.0 * (y >= 0.5), 1.0 * (y < 0.5), 0.0'
#    sheets =  '1.0 * (y < 0.5), 1.0 * (y >=  0.5), 0.0'

    # Applied Stimulus
    [./pacing]
        function = '10. * ( x<0.15 ) *  ( t<2 )'
        # function = '40. * ( (x-48.1495)^2+(y-100.018)^2+(z-85.3423)^2 < 1) * (t<2) '
    [../]

    # Time Data
    [./time]
        use_midpoint = true
        dt = 0.01
        init_time = 0.0
        final_time= 100
        max_iter  = 20000
        save_iter = 50
    [../]

    # Linear Solver options
    [./linear_solver]
        type = cg
        preconditioner = sor
    [../]

[../]